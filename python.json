{
  "Django Model Template with imports": {
    "prefix": "djmodels",
    "body": [
      "from django.db import models",
      "from django.contrib.auth import get_user_model",
      "",
      "User = get_user_model()",
      "",
      "",
      "class ${1:ModelName}(models.Model):",
      "    \"\"\"Model class for ${1:ModelName}\"\"\"",
      "",
      "    class Meta:",
      "        db_table = \"${1:model_name}\"",
      "        verbose_name = \"${1:model name}\"",
      "        verbose_name_plural = \"${1:model name}s\"",
      "        ordering = [\"-${3:id}\"]",
      "",
      "    objects = models.Manager()",
      "",
      "    CHOICES = [",
      "        (\"store_value\", \"Display_Value\"),",
      "    ]",
      "",
      "    # Model fields for ${1:ModelName}",
      "    created_at = models.DateTimeField(auto_now_add=True)",
      "    updated_at = models.DateTimeField(auto_now=True)",
      ""
    ],
    "description": "Template for creating a Django model with Meta options"
  },
  "AutoField": {
    "prefix": "djmodelsAutoField",
    "body": [
      "models.AutoField(",
      "    primary_key=${1:True},",
      "    unique=${2:False},",
      "    db_index=${3:True}, ",
      "    editable=${4:False},",
      "    error_messages={",
      "        \"invalid\": \"Invalid value\",",
      "        \"null\": \"This field cannot be null\",",
      "        \"blank\": \"This field cannot be blank\",",
      "    }",
      ")${0}"
    ],
    "description": "Auto incrementing integer field for primary keys"
  },
  "BigAutoField": {
    "prefix": "djmodelsBigAutoField",
    "body": [
      "models.BigAutoField(",
      "    primary_key=${1:True},",
      "    unique=${2:False}, ",
      "    db_index=${3:True},",
      "    editable=${4:False},",
      "    error_messages={",
      "        \"invalid\": \"Invalid value\",",
      "        \"null\": \"This field cannot be null\",",
      "        \"blank\": \"This field cannot be blank\",",
      "    }",
      ")${0}"
    ],
    "description": "Auto incrementing 64-bit integer field for primary keys"
  },
  "BigIntegerField": {
    "prefix": "djmodelsBigIntegerField",
    "body": [
      "models.BigIntegerField(",
      "    unique=${1:False},",
      "    blank=${3:True}, ",
      "    null=${2:True},",
      "    db_index=${4:False},",
      "    default=${5:None},",
      "    error_messages={",
      "        \"invalid\": \"Invalid value\",",
      "        \"null\": \"This field cannot be null\",",
      "        \"blank\": \"This field cannot be blank\",",
      "    }",
      ")${0}"
    ],
    "description": "Large integer field"
  },
  "BinaryField": {
    "prefix": "djmodelsBinaryField",
    "body": [
      "models.BinaryField(",
      "    max_length=${1:None},",
      "    blank=${3:True},",
      "    null=${2:True},",
      "    editable=${4:True},",
      "    db_column=${5:None},",
      "    error_messages={",
      "        \"invalid\": \"Invalid value\",",
      "        \"null\": \"This field cannot be null\",",
      "        \"blank\": \"This field cannot be blank\",",
      "    }",
      ")${0}"
    ],
    "description": "Binary field"
  },
  "BooleanField": {
    "prefix": "djmodelsBooleanField",
    "body": [
      "models.BooleanField(",
      "    default=${1:False},",
      "    null=${2:False},",
      "    db_index=${3:False},",
      "    error_messages={",
      "        \"invalid\": \"Invalid value\",",
      "        \"null\": \"This field cannot be null\",",
      "        \"blank\": \"This field cannot be blank\",",
      "    }",
      ")${0}"
    ],
    "description": "Boolean field"
  },
  "CharField": {
    "prefix": "djmodelsCharField",
    "body": [
      "models.CharField(",
      "    max_length=${1:255},",
      "    unique=${2:False},",
      "    blank=${4:False},",
      "    null=${3:False},",
      "    db_index=${5:False},",
      "    default=${6:\"\"},",
      "    error_messages={",
      "        \"invalid\": \"Invalid value\",",
      "        \"null\": \"This field cannot be null\",",
      "        \"blank\": \"This field cannot be blank\",",
      "        \"max_length\": \"Ensure this value has at most ${1:255} characters\",",
      "    }",
      ")${0}"
    ],
    "description": "Character field"
  },
  "DateField": {
    "prefix": "djmodelsDateField",
    "body": [
      "models.DateField(",
      "    auto_now=${1:False},",
      "    auto_now_add=${2:False},",
      "    blank=${4:True},",
      "    null=${3:True},",
      "    db_index=${5:False},",
      "    default=${6:None},",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid date\",",
      "        \"null\": \"This field cannot be null\",",
      "        \"blank\": \"This field cannot be blank\"",
      "    }",
      ")${0}"
    ],
    "description": "Date field"
  },
  "DateTimeField": {
    "prefix": "djmodelsDateTimeField",
    "body": [
      "models.DateTimeField(",
      "    auto_now=${1:False},",
      "    auto_now_add=${2:False},",
      "    blank=${4:True},",
      "    null=${3:True},",
      "    db_index=${5:False},",
      "    default=${6:None},",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid date/time\",",
      "        \"null\": \"This field cannot be null\",",
      "        \"blank\": \"This field cannot be blank\"",
      "    }",
      ")${0}"
    ],
    "description": "Date and time field"
  },
  "DecimalField": {
    "prefix": "djmodelsDecimalField",
    "body": [
      "models.DecimalField(",
      "    max_digits=${1:10},",
      "    decimal_places=${2:2},",
      "    blank=${4:True},",
      "    null=${3:True},",
      "    db_index=${5:False},",
      "    default=${6:None},",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid decimal number\",",
      "        \"null\": \"This field cannot be null\",",
      "        \"blank\": \"This field cannot be blank\",",
      "        \"max_digits\": \"Ensure that there are no more than ${1:10} digits in total\",",
      "        \"max_decimal_places\": \"Ensure that there are no more than ${2:2} decimal places\",",
      "        \"max_whole_digits\": \"Ensure that there are no more than ${1:10} digits before the decimal point\"",
      "    }",
      ")${0}"
    ],
    "description": "Decimal field with precision"
  },
  "DurationField": {
    "prefix": "djmodelsDurationField",
    "body": [
      "models.DurationField(",
      "    blank=${2:True},",
      "    null=${1:True},",
      "    db_index=${3:False},",
      "    default=${4:None},",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid duration\",",
      "        \"null\": \"This field cannot be null\",",
      "        \"blank\": \"This field cannot be blank\",",
      "    }",
      ")${0}"
    ],
    "description": "Field for storing durations"
  },
  "EmailField": {
    "prefix": "djmodelsEmailField",
    "body": [
      "models.EmailField(",
      "    max_length=${1:254},",
      "    unique=${2:True},",
      "    blank=${4:False},",
      "    null=${3:False},",
      "    db_index=${5:True},",
      "    default=${6:\"\"},",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid email address\",",
      "        \"null\": \"This field cannot be null\",",
      "        \"blank\": \"This field cannot be blank\",",
      "        \"max_length\": \"Ensure this value has at most ${1:254} characters\"",
      "    }",
      ")${0}"
    ],
    "description": "Email field"
  },
  "FileField": {
    "prefix": "djmodelsFileField",
    "body": [
      "models.FileField(",
      "    upload_to=${1:\"uploads/\"},",
      "    max_length=${2:100},",
      "    blank=${4:True},",
      "    null=${3:True},",
      "    storage=${5:None},",
      "    db_index=${6:False},",
      "    default=${7:None},",
      "    error_messages={",
      "        \"invalid\": \"No file was submitted\",",
      "        \"missing\": \"No file was submitted\",",
      "        \"empty\": \"The submitted file is empty\",",
      "        \"max_length\": \"Ensure this filename has at most ${2:100} characters\",",
      "        \"null\": \"This field cannot be null\",",
      "        \"blank\": \"This field cannot be blank\"",
      "    }",
      ")${0}"
    ],
    "description": "File field"
  },
  "FilePathField": {
    "prefix": "djmodelsFilePathField",
    "body": [
      "models.FilePathField(",
      "    path=${1:\"/path/to/files\"},",
      "    match=${2:None},",
      "    recursive=${3:False},",
      "    allow_files=${4:True},",
      "    allow_folders=${5:False},",
      "    max_length=${6:100},",
      "    blank=${7:True},",
      "    null=${8:True},",
      "    db_index=${9:False},",
      "    default=${10:None},",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid path\",",
      "        \"invalid_choice\": \"Select a valid choice. That choice is not one of the available choices.\",",
      "        \"null\": \"This field cannot be null\",",
      "        \"blank\": \"This field cannot be blank\",",
      "        \"max_length\": \"Ensure this value has at most ${6:100} characters\"",
      "    }",
      ")${0}"
    ],
    "description": "File path field"
  },
  "FloatField": {
    "prefix": "djmodelsFloatField",
    "body": [
      "models.FloatField(",
      "    unique=${1:False},",
      "    blank=${3:True},",
      "    null=${2:True},",
      "    db_index=${4:False},",
      "    default=${5:None},",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid float\",",
      "        \"null\": \"This field cannot be null\",",
      "        \"blank\": \"This field cannot be blank\"",
      "    }",
      ")${0}"
    ],
    "description": "Float field"
  },
  "ImageField": {
    "prefix": "djmodelsImageField",
    "body": [
      "models.ImageField(",
      "    upload_to=${1:\"images/\"},",
      "    height_field=${2:None},",
      "    width_field=${3:None},",
      "    max_length=${4:100},",
      "    blank=${6:True},",
      "    null=${5:True},",
      "    storage=${7:None},",
      "    db_index=${8:False},",
      "    default=${9:None},",
      "    error_messages={",
      "        \"invalid\": \"Invalid image file\",",
      "        \"invalid_image\": \"Upload a valid image. The file you uploaded was either not an image or a corrupted image.\",",
      "        \"missing\": \"No file was submitted\",",
      "        \"empty\": \"The submitted file is empty\",",
      "        \"max_length\": \"Ensure this filename has at most ${4:100} characters\",",
      "        \"null\": \"This field cannot be null\",",
      "        \"blank\": \"This field cannot be blank\"",
      "    }",
      ")${0}"
    ],
    "description": "Image field with optional height and width fields"
  },
  "IntegerField": {
    "prefix": "djmodelsIntegerField",
    "body": [
      "models.IntegerField(",
      "    unique=${1:False},",
      "    blank=${3:False},",
      "    null=${2:True},",
      "    db_index=${4:False},",
      "    default=${5:None},",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid integer\",",
      "        \"null\": \"This field cannot be null\",",
      "        \"blank\": \"This field cannot be blank\",",
      "    }",
      ")${0}"
    ],
    "description": "Integer field"
  },
  "GenericIPAddressField": {
    "prefix": "djmodelsGenericIPAddressField",
    "body": [
      "models.GenericIPAddressField(",
      "    protocol=${1:\"both\"},",
      "    unpack_ipv4=${2:False},",
      "    blank=${4:True},",
      "    null=${3:True},",
      "    db_index=${5:False},",
      "    default=${6:None},",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid IPv4 or IPv6 address\",",
      "        \"null\": \"This field cannot be null\",",
      "        \"blank\": \"This field cannot be blank\"",
      "    }",
      ")${0}"
    ],
    "description": "IP address field"
  },
  "JSONField": {
    "prefix": "djmodelsJSONField",
    "body": [
      "models.JSONField(",
      "    encoder=${1:None},",
      "    decoder=${2:None},",
      "    blank=${4:True},",
      "    null=${3:True},",
      "    db_index=${5:False},",
      "    default=${6:dict},",
      "    error_messages={",
      "        \"invalid\": \"Value must be valid JSON\",",
      "        \"null\": \"This field cannot be null\",",
      "        \"blank\": \"This field cannot be blank\"",
      "    }",
      ")${0}"
    ],
    "description": "JSON field"
  },
  "PositiveIntegerField": {
    "prefix": "djmodelsPositiveIntegerField",
    "body": [
      "models.PositiveIntegerField(",
      "    unique=${1:False},",
      "    blank=${3:False},",
      "    null=${2:True},",
      "    db_index=${4:False},",
      "    default=${5:None},",
      "    error_messages={",
      "        \"invalid\": \"Enter a positive number\",",
      "        \"null\": \"This field cannot be null\",",
      "        \"blank\": \"This field cannot be blank\",",
      "    }",
      ")${0}"
    ],
    "description": "Positive integer field"
  },
  "PositiveSmallIntegerField": {
    "prefix": "djmodelsPositiveSmallIntegerField",
    "body": [
      "models.PositiveSmallIntegerField(",
      "    unique=${1:False},",
      "    blank=${3:True},",
      "    null=${2:True},",
      "    db_index=${4:False},",
      "    default=${5:None},",
      "    error_messages={",
      "        \"invalid\": \"Enter a positive number\",",
      "        \"null\": \"This field cannot be null\",",
      "        \"blank\": \"This field cannot be blank\",",
      "    }",
      ")${0}"
    ],
    "description": "Positive small integer field"
  },
  "SlugField": {
    "prefix": "djmodelsSlugField",
    "body": [
      "models.SlugField(",
      "    max_length=${1:50},",
      "    unique=${2:False},",
      "    blank=${4:True},",
      "    null=${3:True},",
      "    allow_unicode=${5:False},",
      "    db_index=${6:True},",
      "    default=${7:\"\"},",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid slug consisting of letters, numbers, underscores or hyphens\",",
      "        \"null\": \"This field cannot be null\",",
      "        \"blank\": \"This field cannot be blank\",",
      "        \"max_length\": \"Ensure this value has at most ${1:50} characters\"",
      "    }",
      ")${0}"
    ],
    "description": "Slug field"
  },
  "SmallIntegerField": {
    "prefix": "djmodelsSmallIntegerField",
    "body": [
      "models.SmallIntegerField(",
      "    unique=${1:False},",
      "    blank=${3:True},",
      "    null=${2:True},",
      "    db_index=${4:False},",
      "    default=${5:None},",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid number\",",
      "        \"null\": \"This field cannot be null\",",
      "        \"blank\": \"This field cannot be blank\",",
      "    }",
      ")${0}"
    ],
    "description": "Small integer field"
  },
  "TextField": {
    "prefix": "djmodelsTextField",
    "body": [
      "models.TextField(",
      "    blank=${2:True},",
      "    null=${1:True},",
      "    db_index=${3:False},",
      "    default=${4:\"\"},",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid value\",",
      "        \"null\": \"This field cannot be null\",",
      "        \"blank\": \"This field cannot be blank\",",
      "    }",
      ")${0}"
    ],
    "description": "Text field"
  },
  "TimeField": {
    "prefix": "djmodelsTimeField",
    "body": [
      "models.TimeField(",
      "    auto_now=${1:False},",
      "    auto_now_add=${2:False},",
      "    blank=${4:True},",
      "    null=${3:True},",
      "    db_index=${5:False},",
      "    default=${6:None},",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid time\",",
      "        \"null\": \"This field cannot be null\",",
      "        \"blank\": \"This field cannot be blank\"",
      "    }",
      ")${0}"
    ],
    "description": "Time field"
  },
  "URLField": {
    "prefix": "djmodelsURLField",
    "body": [
      "models.URLField(",
      "    max_length=${1:200},",
      "    blank=${3:True},",
      "    null=${2:True},",
      "    db_index=${4:False},",
      "    default=${5:\"\"},",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid URL\",",
      "        \"null\": \"This field cannot be null\",",
      "        \"blank\": \"This field cannot be blank\",",
      "        \"max_length\": \"Ensure this value has at most ${1:200} characters\"",
      "    }",
      ")${0}"
    ],
    "description": "URL field"
  },
  "UUIDField": {
    "prefix": "djmodelsUUIDField",
    "body": [
      "models.UUIDField(",
      "    primary_key=${1:False},",
      "    default=${2:uuid.uuid4},",
      "    editable=${3:True},",
      "    unique=${4:False},",
      "    db_index=${5:False},",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid UUID\",",
      "        \"null\": \"This field cannot be null\",",
      "        \"blank\": \"This field cannot be blank\"",
      "    }",
      ")${0}"
    ],
    "description": "UUID field"
  },
  "ForeignKey": {
    "prefix": "djmodelsForeignKey",
    "body": [
      "models.ForeignKey(",
      "    ${1:User},",
      "    on_delete=${2:models.CASCADE},",
      "    primary_key=${3:False},",
      "    related_name=${4:\"+\"},",
      "    related_query_name=${5:None},",
      "    limit_choices_to=${6:{}},",
      "    parent_link=${7:False},",
      "    blank=${9:False},",
      "    null=${8:False},",
      "    db_index=${10:True},",
      "    db_constraint=${11:True},",
      "    error_messages={",
      "        \"invalid\": \"Invalid value\",",
      "        \"invalid_choice\": \"Select a valid choice. That choice is not one of the available choices.\",",
      "        \"null\": \"This field cannot be null\",",
      "        \"blank\": \"This field cannot be blank\",",
      "        \"does_not_exist\": \"Object does not exist\"",
      "    }",
      ")${0}"
    ],
    "description": "Foreign key to another model"
  },
  "OneToOneField": {
    "prefix": "djmodelsOneToOneField",
    "body": [
      "models.OneToOneField(",
      "    ${1:User},",
      "    on_delete=${2:models.CASCADE},",
      "    primary_key=${3:False},",
      "    related_name=${4:\"+\"},",
      "    related_query_name=${5:None},",
      "    limit_choices_to=${6:{}},",
      "    parent_link=${7:False},",
      "    blank=${9:False},",
      "    null=${8:False},",
      "    db_index=${10:True},",
      "    db_constraint=${11:True},",
      "    error_messages={",
      "        \"invalid\": \"Invalid value\",",
      "        \"invalid_choice\": \"Select a valid choice. That choice is not one of the available choices.\",",
      "        \"null\": \"This field cannot be null\",",
      "        \"blank\": \"This field cannot be blank\",",
      "        \"does_not_exist\": \"Object does not exist\"",
      "    }",
      ")${0}"
    ],
    "description": "One-to-one relationship with another model"
  },
  "ManyToManyField": {
    "prefix": "djmodelsManyToManyField",
    "body": [
      "models.ManyToManyField(",
      "    ${1:User},",
      "    related_name=${2:\"+\"},",
      "    related_query_name=${3:None},",
      "    limit_choices_to=${4:{}},",
      "    symmetrical=${5:None},",
      "    through=${6:None},",
      "    through_fields=${7:None},",
      "    db_table=${8:None},",
      "    db_constraint=${9:True},",
      "    swappable=${10:True},",
      "    blank=${11:False},",
      "    error_messages={",
      "        \"invalid\": \"Invalid value\",",
      "        \"invalid_choice\": \"Select a valid choice. That choice is not one of the available choices.\",",
      "        \"invalid_pk_value\": \"Invalid primary key value\",",
      "        \"null\": \"This field cannot be null\",",
      "        \"blank\": \"This field cannot be blank\"",
      "    }",
      ")${0}"
    ],
    "description": "Many-to-many relationship with another model"
  },
  "Django Admin Register Model": {
    "prefix": "djadminModelAdmin",
    "body": [
      "from django.contrib import admin",
      "from ${1:.models} import ${2:ModelName}",
      "",
      "",
      "@admin.register(${2:ModelName})",
      "class ${2:ModelName}Admin(admin.ModelAdmin):",
      "    list_display = [",
      "        field.name",
      "        for field in Repository._meta.get_fields()",
      "        if not (field.many_to_many or field.one_to_many)",
      "    ]",
      "    list_display_links = list_display",
      "    ordering = (\"-id\",)",
      "    list_filter = (\"${4:category}\",)",
      "    search_fields = (\"${3:name}\",)"
    ],
    "description": "Register a model in Django Admin"
  },
  "Django Admin TabularInline Model": {
    "prefix": "djadminTabularInline",
    "body": [
      "class ${1:ModelName}Inline(admin.TabularInline):",
      "    model = ${1:ModelName}",
      "    extra = ${2:1}"
    ],
    "description": "Django Admin TabularInline Model"
  },
  "Django Custom Admin Actions": {
    "prefix": "djadminCustomAction",
    "body": [
      "def ${1:make_published}(modeladmin, request, queryset):",
      "    queryset.update(${2:status}=\"published\")",
      "make_published.short_description = \"Mark selected items as Published\"",
      "",
      "",
      "class ${3:ModelName}Admin(admin.ModelAdmin):",
      "    actions = [${1:make_published}]"
    ],
    "description": "Django Admin Custom Actions"
  },
  "Django Custom Template Tag (Simple)": {
    "prefix": "djcustomTag",
    "body": [
      "from django import template",
      "",
      "register = template.Library()",
      "",
      "",
      "@register.simple_tag",
      "def ${1:custom_tag_name}(${2:arg1}):",
      "    \"\"\"Returns a processed value.\"\"\"",
      "    return ${3:processed_value}"
    ],
    "description": "Django Custom Template Tag (Simple)"
  },
  "Django Custom Template Tag (With Context)": {
    "prefix": "djcustomTagWithContext",
    "body": [
      "from django import template",
      "",
      "register = template.Library()",
      "",
      "",
      "@register.simple_tag(takes_context=True)",
      "def ${1:custom_tag_name}(context, ${2:arg1}):",
      "    \"\"\"Returns a processed value using context.\"\"\"",
      "    return context.get(\"${3:key}\", ${4:default_value})"
    ],
    "description": "Django Custom Template Tag with Context"
  },
  "Django Custom Template Filter": {
    "prefix": "djcustomFilter",
    "body": [
      "from django import template",
      "",
      "register = template.Library()",
      "",
      "",
      "@register.filter",
      "def ${1:custom_filter}(value):",
      "    \"\"\"Modify the given value.\"\"\"",
      "    return ${2:modified_value}"
    ],
    "description": "Django Custom Template Filter"
  },
  "Django Custom Template Tag (Inclusion)": {
    "prefix": "djcustomInclussionTag",
    "body": [
      "from django import template",
      "from django.template.loader import render_to_string",
      "",
      "register = template.Library()",
      "",
      "",
      "@register.inclusion_tag(\"${1:template_name}.html\")",
      "def ${2:custom_tag}(${3:arg1}):",
      "    \"\"\"Renders a template snippet.\"\"\"",
      "    return {",
      "        \"${4:context_key}\": ${3:arg1}",
      "    }"
    ],
    "description": "Django Inclusion Template Tag"
  },
  "Django Custom Template Tag (Assignment)": {
    "prefix": "djcustomAssignVariableTag",
    "body": [
      "from django import template",
      "",
      "register = template.Library()",
      "",
      "",
      "@register.simple_tag",
      "def ${1:assign_var}(${2:value}):",
      "    \"\"\"Assign a value inside a template.\"\"\"",
      "    return ${2:value}"
    ],
    "description": "Django Assignment Template Tag"
  },
  "Django URL Pattern": {
    "prefix": "djurlpatterns",
    "body": [
      "from django.urls import path",
      "from ${1:.views} import ${2:ViewName}",
      "",
      "urlpatterns = [",
      "    path(\"${3:route}/\", ${2:ViewName}.as_view(), name=\"${4:view_name}\"),",
      "]"
    ],
    "description": "Django URL Pattern"
  },
  "Django Form": {
    "prefix": "djform",
    "body": [
      "from django import forms",
      "from ${1:.models} import ${2:ModelName}",
      "",
      "",
      "class ${2}Form(forms.ModelForm):",
      "    class Meta:",
      "        model = ${2:ModelName}",
      "        fields = [\"${3:field1}\", \"${4:field2}\"]",
      "        exclude = []",
      "        labels = {",
      "            \"${3:field1}\": \"Custom Label\",",
      "        }",
      "        widgets = {",
      "            \"${3:field1}\": forms.TextInput(attrs={\"class\": \"form-control\"})",
      "        }",
      "        help_texts = {",
      "            \"${3:field1}\": \"Help text for this field\",",
      "        }",
      "        error_messages = {",
      "            \"${3:field1}\": {",
      "                \"required\": \"This field is required\",",
      "                \"invalid\": \"Invalid input\"",
      "            }",
      "        }",
      "        field_classes = {",
      "            \"${3:field1}\": forms.CharField",
      "        }",
      "        localized_fields = (\"${3:field1}\",)"
    ],
    "description": "Django Model Form"
  },
  "Django Signals": {
    "prefix": "djsignals",
    "body": [
      "from django.db.models.signals import (",
      "    m2m_changed,",
      "    post_delete,",
      "    post_migrate,",
      "    post_save,",
      "    pre_delete,",
      "    pre_migrate,",
      "    pre_save,",
      ")",
      "from django.dispatch import receiver",
      "from ${1:.models} import ${2:ModelName}",
      "",
      "",
      "@receiver(post_save, sender=${2:ModelName})",
      "def ${3:signal_function}(sender, instance, created, **kwargs):",
      "    if created:",
      "        # Perform action on new instance creation",
      "        pass"
    ],
    "description": "Django Signals (post_save)"
  },
  "Django REST Framework Model Serializer Base with imports": {
    "prefix": "drfmodelSerializer",
    "body": [
      "from rest_framework import serializers",
      "from .models import ${1:ModelName}",
      "",
      "",
      "class ${1:ModelName}Serializer(serializers.ModelSerializer):",
      "    \"\"\"Serializer class for ${1:ModelName}\"\"\"",
      "",
      "    class Meta:",
      "        model = ${1:ModelName}",
      "        fields = [\"id\", \"${2:custom_field}\"]",
      "        exclude = []",
      "        read_only_fields = [\"id\"]",
      "        write_only_fields = []",
      "        extra_kwargs = {",
      "            \"id\": {",
      "                \"read_only\": True",
      "            }",
      "        }$3",
      "",
      "    # Define any additional fields and methods here.",
      "    ${2:custom_field} = serializers.SerializerMethodField()$4",
      "",
      "    def get_${2:custom_field}(self, obj):",
      "        return obj.id$0",
      ""
    ],
    "description": "Base Django REST Framework model serializer with Meta class with imports"
  },
  "DRF Serializer, get Custom Field Method": {
    "prefix": "drfserializerGetCustomField",
    "body": ["get_${1:custom_field}(self, obj):", "    return obj.${2:id}"],
    "description": "Method to get/fetch a custom serializer field"
  },
  "DRF Serializer, Validate Field Method": {
    "prefix": "drfserializerValidateSingleField",
    "body": [
      "validate_${1:field}(self, value):",
      "    if ${2:condition}:",
      "        return value",
      "    else:",
      "        raise serializers.ValidationError(\"Invalid '${1:field}'\")"
    ],
    "description": "Validation method for a specific serializer field"
  },
  "DRF Serializer, Multiple Fields Validation Method": {
    "prefix": "drfserializerValidateMultipleField",
    "body": [
      "validate(self, data):",
      "    # Add validation logic here",
      "    return data"
    ],
    "description": "Method to validate multiple serializer fields"
  },
  "DRF Serializer, Create Method Override": {
    "prefix": "drfserializerOverrideCreateMethod",
    "body": [
      "create(self, validated_data):",
      "    # Create and return multiple record instances at once",
      "    if isinstance(validated_data, list):",
      "        bulk_data = [${1:ModelName}(**data) for data in validated_data]",
      "        return ${1:ModelName}.objects.bulk_create(bulk_data)",
      "",
      "    # Create and return a single record instance.",
      "    return ${1:ModelName}.objects.create(**validated_data)",
      ""
    ],
    "description": "Override create method for serializer"
  },
  "DRF Serializer, Update Method Override": {
    "prefix": "drfserializerOverrideUpdateMethod",
    "body": [
      "update(self, instance, validated_data):",
      "    # Custom logic before updating instance values",
      "    for attr, value in validated_data.items():",
      "        setattr(instance, attr, value)",
      "",
      "    # Save once, after all fields are updated.",
      "    instance.save()",
      "    return instance"
    ],
    "description": "Override update method for serializer"
  },
  "Django Celery Task": {
    "prefix": "djcelery",
    "body": [
      "from celery import shared_task",
      "",
      "",
      "@shared_task",
      "def ${1:task_name}():",
      "    \"\"\"Background task\"\"\"",
      "    return \"Task Completed\""
    ],
    "description": "Django Celery Task"
  },
  "Django Generic CRUD Imports": {
    "prefix": "djviewsGenericCRUDImports",
    "body": [
      "from django.contrib.auth.mixins import LoginRequiredMixin, UserPassesTestMixin",
      "from django.urls import reverse_lazy",
      "from django.views.generic import (",
      "    CreateView,",
      "    DeleteView,",
      "    DetailView,",
      "    ListView,",
      "    UpdateView",
      ")",
      "",
      "from .models import ${1:Item}"
    ],
    "description": "Common Django imports for class-based views"
  },
  "Item List View": {
    "prefix": "djviewsGenericLiseView",
    "body": [
      "class ${1:Item}ListView(LoginRequiredMixin, ListView):",
      "    model = ${1:Item}",
      "    context_object_name = \"${2:context_name}\"",
      "    paginate_by = 10",
      "",
      "    def get_queryset(self):",
      "        return self.model.objects.filter(user=self.request.user)",
      "",
      "    def get_template_names(self):",
      "        return [f\"items/{self.model.__name__.lower()}_list.html\"]"
    ],
    "description": "List view for user's specific records"
  },
  "Item Detail View": {
    "prefix": "djviewsGenericDetailView",
    "body": [
      "class ${1:Item}DetailView(LoginRequiredMixin, UserIsOwnerMixin, DetailView):",
      "    model = ${1:Item}",
      "    context_object_name = \"${2:item}\"",
      "",
      "    def get_context_data(self, **kwargs):",
      "        context = super().get_context_data(**kwargs)",
      "        context[\"${3:additional_data_key}\"] = \"${4:additional_data_value}\"",
      "        return context",
      "",
      "    def get_template_names(self):",
      "        return [f\"items/{self.model.__name__.lower()}_detail.html\"]"
    ],
    "description": "Detail view for retrieving a single user-owned record"
  },
  "Item Create View": {
    "prefix": "djviewsGenericCreateView",
    "body": [
      "class ${1:Item}CreateView(LoginRequiredMixin, CreateView):",
      "    model = ${1:Item}",
      "    fields = \"__all__\"",
      "",
      "    def form_valid(self, form):",
      "        form.instance.user = self.request.user",
      "        return super().form_valid(form)",
      "",
      "    def get_context_data(self, **kwargs):",
      "        context = super().get_context_data(**kwargs)",
      "        context['${2:item}_create_form'] = context.pop('form')",
      "        return context",
      "",
      "    def get_success_url(self):",
      "        return reverse_lazy(\"${2:item}_list\")",
      "",
      "    def get_template_names(self):",
      "        return [f\"items/{self.model.__name__.lower()}_form.html\"]"
    ],
    "description": "Create view with auto-assign logged-in user"
  },
  "Item Update View": {
    "prefix": "djviewsGenericUpdateView",
    "body": [
      "class ${1:Item}UpdateView(LoginRequiredMixin, UserIsOwnerMixin, UpdateView):",
      "    model = ${1:Item}",
      "    fields = \"__all__\"",
      "",
      "    def get_context_data(self, **kwargs):",
      "        context = super().get_context_data(**kwargs)",
      "        context['${2:item}_update_form'] = context.pop('form')",
      "        return context",
      "",
      "    def get_success_url(self):",
      "        return reverse_lazy(\"${2:item}_list\")",
      "",
      "    def get_template_names(self):",
      "        return [f\"items/{self.model.__name__.lower()}_form.html\"]"
    ],
    "description": "Update view allowing only record owner to edit"
  },
  "Item Delete View": {
    "prefix": "djviewsGenericDeleteView",
    "body": [
      "class ${1:Item}DeleteView(LoginRequiredMixin, UserIsOwnerMixin, DeleteView):",
      "    model = ${1:Item}",
      "",
      "    def get_success_url(self):",
      "        return reverse_lazy(\"${2:item}_list\")",
      "",
      "    def get_template_names(self):",
      "        return [f\"items/{self.model.__name__.lower()}_confirm_delete.html\"]"
    ],
    "description": "Delete view allowing only record owner to delete"
  },
  "User Is Owner Mixin": {
    "prefix": "djviewsUserIsOwnerMixin",
    "body": [
      "class UserIsOwnerMixin(UserPassesTestMixin):",
      "    def test_func(self):",
      "        obj = self.get_object()",
      "        return obj.user == self.request.user"
    ],
    "description": "Mixin to check if user is the owner of the object"
  },
  "Django URL Patterns": {
    "prefix": "djviewsGenericCRUDUrlpatterns",
    "body": [
      "from django.urls import path",
      "from .views import (",
      "    ${1:Item}ListView,",
      "    ${1:Item}DetailView,",
      "    ${1:Item}CreateView,",
      "    ${1:Item}UpdateView,",
      "    ${1:Item}DeleteView",
      ")",
      "",
      "",
      "urlpatterns = [",
      "    path(\"\", ${1:Item}ListView.as_view(), name=\"${2:item}_list\"),",
      "    path(\"<int:pk>/\", ${1:Item}DetailView.as_view(), name=\"${2:item}_detail\"),",
      "    path(\"create/\", ${1:Item}CreateView.as_view(), name=\"${2:item}_create\"),",
      "    path(\"<int:pk>/update/\", ${1:Item}UpdateView.as_view(), name=\"${2:item}_update\"),",
      "    path(\"<int:pk>/delete/\", ${1:Item}DeleteView.as_view(), name=\"${2:item}_delete\"),",
      "]$0"
    ],
    "description": "URL patterns for Django views"
  }
}
