{
  "AutoField": {
    "prefix": "snAutoField",
    "body": [
      "models.AutoField(",
      "    primary_key=True,",
      "    unique=False,",
      "    db_index=True,",
      "    editable=False,",
      "    error_messages={",
      "        \"invalid\": \"Invalid 'value'\",",
      "        \"null\": \"This 'field' cannot be null\",",
      "        \"blank\": \"This 'field' cannot be blank\",",
      "    }",
      ")$0"
    ],
    "description": "Auto incrementing integer field for primary keys"
  },
  "BigAutoField": {
    "prefix": "snBigAutoField",
    "body": [
      "models.BigAutoField(",
      "    primary_key=True,",
      "    unique=False,",
      "    db_index=True,",
      "    editable=False,",
      "    error_messages={",
      "        \"invalid\": \"Invalid 'value'\",",
      "        \"null\": \"This 'field' cannot be null\",",
      "        \"blank\": \"This 'field' cannot be blank\",",
      "    }",
      ")$0"
    ],
    "description": "Auto incrementing 64-bit integer field for primary keys"
  },
  "BigIntegerField": {
    "prefix": "snBigIntegerField",
    "body": [
      "models.BigIntegerField(",
      "    unique=False,",
      "    null=True,",
      "    blank=True,",
      "    db_index=False,",
      "    default=None,",
      "    error_messages={",
      "        \"invalid\": \"Invalid 'value'\",",
      "        \"null\": \"This 'field' cannot be null\",",
      "        \"blank\": \"This 'field' cannot be blank\",",
      "    }",
      ")$0"
    ],
    "description": "Large integer field"
  },
  "BinaryField": {
    "prefix": "snBinaryField",
    "body": [
      "models.BinaryField(",
      "    max_length=None,",
      "    null=True,",
      "    blank=True,",
      "    editable=True,",
      "    db_column=None,",
      "    error_messages={",
      "        \"invalid\": \"Invalid 'value'\",",
      "        \"null\": \"This 'field' cannot be null\",",
      "        \"blank\": \"This 'field' cannot be blank\",",
      "    }",
      ")$0"
    ],
    "description": "Binary field"
  },
  "BooleanField": {
    "prefix": "snBooleanField",
    "body": [
      "models.BooleanField(",
      "    default=False,",
      "    null=False,",
      "    db_index=False,",
      "    error_messages={",
      "        \"invalid\": \"Invalid 'value'\",",
      "        \"null\": \"This 'field' cannot be null\",",
      "        \"blank\": \"This 'field' cannot be blank\",",
      "    }",
      ")$0"
    ],
    "description": "Boolean field"
  },
  "CharField": {
    "prefix": "snCharField",
    "body": [
      "models.CharField(",
      "    max_length=255,",
      "    unique=False,",
      "    null=False,",
      "    blank=False,",
      "    db_index=False,",
      "    default=\"\",",
      "    error_messages={",
      "        \"invalid\": \"Invalid 'value'\",",
      "        \"null\": \"This 'field' cannot be null\",",
      "        \"blank\": \"This 'field' cannot be blank\",",
      "        \"max_length\": \"Ensure this 'value' has at most %(limit_value)d characters\"",
      "    }",
      ")$0"
    ],
    "description": "Character field"
  },
  "DateField": {
    "prefix": "snDateField",
    "body": [
      "models.DateField(",
      "    auto_now=False,",
      "    auto_now_add=False,",
      "    null=True,",
      "    blank=True,",
      "    db_index=False,",
      "    default=None,",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid 'date'\",",
      "        \"null\": \"This 'field' cannot be null\",",
      "        \"blank\": \"This 'field' cannot be blank\"",
      "    }",
      ")$0"
    ],
    "description": "Date field"
  },
  "DateTimeField": {
    "prefix": "snDateTimeField",
    "body": [
      "models.DateTimeField(",
      "    auto_now=False,",
      "    auto_now_add=False,",
      "    null=True,",
      "    blank=True,",
      "    db_index=False,",
      "    default=None,",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid 'date/time'\",",
      "        \"null\": \"This 'field' cannot be null\",",
      "        \"blank\": \"This 'field' cannot be blank\"",
      "    }",
      ")$0"
    ],
    "description": "Date and time field"
  },
  "DecimalField": {
    "prefix": "snDecimalField",
    "body": [
      "models.DecimalField(",
      "    max_digits=10,",
      "    decimal_places=2,",
      "    null=True,",
      "    blank=True,",
      "    db_index=False,",
      "    default=None,",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid 'decimal number'\",",
      "        \"null\": \"This 'field' cannot be null\",",
      "        \"blank\": \"This 'field' cannot be blank\",",
      "        \"max_digits\": \"Ensure that there are no more than %(max)s 'digits' in total\",",
      "        \"max_decimal_places\": \"Ensure that there are no more than %(max)s 'decimal places'\",",
      "        \"max_whole_digits\": \"Ensure that there are no more than %(max)s 'digits' before the decimal point\"",
      "    }",
      ")$0"
    ],
    "description": "Decimal field with precision"
  },
  "DurationField": {
    "prefix": "snDurationField",
    "body": [
      "models.DurationField(",
      "    null=True,",
      "    blank=True,",
      "    db_index=False,",
      "    default=None,",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid 'duration'\",",
      "        \"null\": \"This 'field' cannot be null\",",
      "        \"blank\": \"This 'field' cannot be blank\",",
      "    }",
      ")$0"
    ],
    "description": "Field for storing durations"
  },
  "EmailField": {
    "prefix": "snEmailField",
    "body": [
      "models.EmailField(",
      "    max_length=254,",
      "    unique=True,",
      "    null=False,",
      "    blank=False,",
      "    db_index=True,",
      "    default=\"\",",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid 'email address'\",",
      "        \"null\": \"This 'field' cannot be null\",",
      "        \"blank\": \"This 'field' cannot be blank\"",
      "    }",
      ")$0"
    ],
    "description": "Email field"
  },
  "FileField": {
    "prefix": "snFileField",
    "body": [
      "models.FileField(",
      "    upload_to=\"uploads/\",",
      "    max_length=100,",
      "    null=True,",
      "    blank=True,",
      "    storage=None,",
      "    db_index=False,",
      "    default=None,",
      "    error_messages={",
      "        \"invalid\": \"No 'file' was submitted\",",
      "        \"missing\": \"No 'file' was submitted\",",
      "        \"empty\": \"The submitted 'file' is empty\",",
      "        \"max_length\": \"Ensure this 'filename' has at most %(max)d characters\",",
      "        \"null\": \"This 'field' cannot be null\",",
      "        \"blank\": \"This 'field' cannot be blank\"",
      "    }",
      ")$0"
    ],
    "description": "File field"
  },
  "FilePathField": {
    "prefix": "snFilePathField",
    "body": [
      "models.FilePathField(",
      "    path=\"/path/to/files\",",
      "    match=None,",
      "    recursive=False,",
      "    allow_files=True,",
      "    allow_folders=False,",
      "    max_length=100,",
      "    blank=True,",
      "    null=True,",
      "    db_index=False,",
      "    default=None,",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid 'path'\",",
      "        \"invalid_choice\": \"%(value)s is not one of the available 'choices'\",",
      "        \"null\": \"This 'field' cannot be null\",",
      "        \"blank\": \"This 'field' cannot be blank\"",
      "    }",
      ")$0"
    ],
    "description": "File path field"
  },
  "FloatField": {
    "prefix": "snFloatField",
    "body": [
      "models.FloatField(",
      "    unique=False,",
      "    null=True,",
      "    blank=True,",
      "    db_index=False,",
      "    default=None,",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid 'float'\",",
      "        \"null\": \"This 'field' cannot be null\",",
      "        \"blank\": \"This 'field' cannot be blank\"",
      "    }",
      ")$0"
    ],
    "description": "Float field"
  },
  "ImageField": {
    "prefix": "snImageField",
    "body": [
      "models.ImageField(",
      "    upload_to=\"images/\",",
      "    height_field=None,",
      "    width_field=None,",
      "    max_length=100,",
      "    null=True,",
      "    blank=True,",
      "    storage=None,",
      "    db_index=False,",
      "    default=None,",
      "    error_messages={",
      "        \"invalid\": \"Invalid 'image file'\",",
      "        \"invalid_image\": \"Upload a valid 'image'. The file you uploaded was either not an image or a corrupted image\",",
      "        \"missing\": \"No 'file' was submitted\",",
      "        \"empty\": \"The submitted 'file' is empty\",",
      "        \"max_length\": \"Ensure this 'filename' has at most %(max)d characters\",",
      "        \"null\": \"This 'field' cannot be null\",",
      "        \"blank\": \"This 'field' cannot be blank\"",
      "    }",
      ")$0"
    ],
    "description": "Image field with optional height and width fields"
  },
  "IntegerField": {
    "prefix": "snIntegerField",
    "body": [
      "models.IntegerField(",
      "    unique=False,",
      "    null=True,",
      "    blank=False,",
      "    db_index=False,",
      "    default=None,",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid 'integer'\",",
      "        \"null\": \"This 'field' cannot be null\",",
      "        \"blank\": \"This 'field' cannot be blank\",",
      "    }",
      ")$0"
    ],
    "description": "Integer field"
  },
  "GenericIPAddressField": {
    "prefix": "snGenericIPAddressField",
    "body": [
      "models.GenericIPAddressField(",
      "    protocol=\"both\",",
      "    unpack_ipv4=False,",
      "    null=True,",
      "    blank=True,",
      "    db_index=False,",
      "    default=None,",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid 'IPv4 or IPv6 address'\",",
      "        \"null\": \"This 'field' cannot be null\",",
      "        \"blank\": \"This 'field' cannot be blank\"",
      "    }",
      ")$0"
    ],
    "description": "IP address field"
  },
  "JSONField": {
    "prefix": "snJSONField",
    "body": [
      "models.JSONField(",
      "    encoder=None,",
      "    decoder=None,",
      "    null=True,",
      "    blank=True,",
      "    db_index=False,",
      "    default=dict,",
      "    error_messages={",
      "        \"invalid\": \"Value must be valid 'JSON'\",",
      "        \"null\": \"This 'field' cannot be null\",",
      "        \"blank\": \"This 'field' cannot be blank\"",
      "    }",
      ")$0"
    ],
    "description": "JSON field"
  },
  "PositiveIntegerField": {
    "prefix": "snPositiveIntegerField",
    "body": [
      "models.PositiveIntegerField(",
      "    unique=False,",
      "    null=True,",
      "    blank=False,",
      "    db_index=False,",
      "    default=None,",
      "    error_messages={",
      "        \"invalid\": \"Enter a positive 'number'\",",
      "        \"null\": \"This 'field' cannot be null\",",
      "        \"blank\": \"This 'field' cannot be blank\",",
      "    }",
      ")$0"
    ],
    "description": "Positive integer field"
  },
  "PositiveSmallIntegerField": {
    "prefix": "snPositiveSmallIntegerField",
    "body": [
      "models.PositiveSmallIntegerField(",
      "    unique=False,",
      "    null=True,",
      "    blank=True,",
      "    db_index=False,",
      "    default=None,",
      "    error_messages={",
      "        \"invalid\": \"Enter a positive 'number'\",",
      "        \"null\": \"This 'field' cannot be null\",",
      "        \"blank\": \"This 'field' cannot be blank\",",
      "    }",
      ")$0"
    ],
    "description": "Positive small integer field"
  },
  "SlugField": {
    "prefix": "snSlugField",
    "body": [
      "models.SlugField(",
      "    max_length=50,",
      "    unique=False,",
      "    null=True,",
      "    blank=True,",
      "    allow_unicode=False,",
      "    db_index=True,",
      "    default=\"\",",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens\",",
      "        \"null\": \"This 'field' cannot be null\",",
      "        \"blank\": \"This 'field' cannot be blank\"",
      "    }",
      ")$0"
    ],
    "description": "Slug field"
  },
  "SmallIntegerField": {
    "prefix": "snSmallIntegerField",
    "body": [
      "models.SmallIntegerField(",
      "    unique=False,",
      "    null=True,",
      "    blank=True,",
      "    db_index=False,",
      "    default=None,",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid 'number'\",",
      "        \"null\": \"This 'field' cannot be null\",",
      "        \"blank\": \"This 'field' cannot be blank\",",
      "    }",
      ")$0"
    ],
    "description": "Small integer field"
  },
  "TextField": {
    "prefix": "snTextField",
    "body": [
      "models.TextField(",
      "    null=True,",
      "    blank=True,",
      "    db_index=False,",
      "    default=\"\",",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid 'value'\",",
      "        \"null\": \"This 'field' cannot be null\",",
      "        \"blank\": \"This 'field' cannot be blank\",",
      "    }",
      ")$0"
    ],
    "description": "Text field"
  },
  "TimeField": {
    "prefix": "snTimeField",
    "body": [
      "models.TimeField(",
      "    auto_now=False,",
      "    auto_now_add=False,",
      "    null=True,",
      "    blank=True,",
      "    db_index=False,",
      "    default=None,",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid 'time'\",",
      "        \"null\": \"This 'field' cannot be null\",",
      "        \"blank\": \"This 'field' cannot be blank\"",
      "    }",
      ")$0"
    ],
    "description": "Time field"
  },
  "URLField": {
    "prefix": "snURLField",
    "body": [
      "models.URLField(",
      "    max_length=200,",
      "    null=True,",
      "    blank=True,",
      "    db_index=False,",
      "    default=\"\",",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid 'URL'\",",
      "        \"null\": \"This 'field' cannot be null\",",
      "        \"blank\": \"This 'field' cannot be blank\",",
      "    }",
      ")$0"
    ],
    "description": "URL field"
  },
  "UUIDField": {
    "prefix": "snUUIDField",
    "body": [
      "models.UUIDField(",
      "    primary_key=False,",
      "    default=uuid.uuid4,",
      "    editable=True,",
      "    unique=False,",
      "    db_index=False,",
      "    error_messages={",
      "        \"invalid\": \"Enter a valid 'UUID'\",",
      "        \"null\": \"This 'field' cannot be null\",",
      "        \"blank\": \"This 'field' cannot be blank\"",
      "    }",
      ")$0"
    ],
    "description": "UUID field"
  },
  "ForeignKey": {
    "prefix": "snForeignKey",
    "body": [
      "models.ForeignKey(",
      "    User,",
      "    on_delete=models.CASCADE,",
      "    primary_key=False,",
      "    related_name=\"+\",",
      "    related_query_name=None,",
      "    limit_choices_to={},",
      "    parent_link=False,",
      "    null=False,",
      "    blank=False,",
      "    db_index=True,",
      "    db_constraint=True,",
      "    error_messages={",
      "        \"invalid\": \"Invalid 'value'\",",
      "        \"invalid_choice\": \"%(value)s is not one of the available 'choices'\",",
      "        \"null\": \"This 'field' cannot be null\",",
      "        \"blank\": \"This 'field' cannot be blank\",",
      "        \"does_not_exist\": \"%(model)s instance with pk %(pk)r does not exist\"",
      "    }",
      ")$0"
    ],
    "description": "Foreign key to another model"
  },
  "OneToOneField": {
    "prefix": "snOneToOneField",
    "body": [
      "models.OneToOneField(",
      "    User,",
      "    on_delete=models.CASCADE,",
      "    primary_key=False,",
      "    related_name=\"+\",",
      "    related_query_name=None,",
      "    limit_choices_to={},",
      "    parent_link=False,",
      "    null=False,",
      "    blank=False,",
      "    db_index=True,",
      "    db_constraint=True,",
      "    error_messages={",
      "        \"invalid\": \"Invalid 'value'\",",
      "        \"invalid_choice\": \"%(value)s is not one of the available 'choices'\",",
      "        \"null\": \"This 'field' cannot be null\",",
      "        \"blank\": \"This 'field' cannot be blank\",",
      "        \"does_not_exist\": \"%(model)s instance with pk %(pk)r does not exist\"",
      "    }",
      ")$0"
    ],
    "description": "One-to-one relationship with another model"
  },
  "ManyToManyField": {
    "prefix": "snManyToManyField",
    "body": [
      "models.ManyToManyField(",
      "    User,",
      "    related_name=\"+\",",
      "    related_query_name=None,",
      "    limit_choices_to={},",
      "    symmetrical=None,",
      "    through=None,",
      "    through_fields=None,",
      "    db_table=None,",
      "    db_constraint=True,",
      "    swappable=True,",
      "    blank=False,",
      "    error_messages={",
      "        \"invalid\": \"Invalid pk 'value'\",",
      "        \"invalid_choice\": \"%(value)s is not one of the available 'choices'\",",
      "        \"invalid_pk_value\": \"%(pk)r is not a valid 'value'\",",
      "        \"null\": \"This 'field' cannot be null\",",
      "        \"blank\": \"This 'field' cannot be blank\"",
      "    }",
      ")$0"
    ],
    "description": "Many-to-many relationship with another model"
  },
  "Django Model Template with imports": {
    "prefix": "snDJmI",
    "body": [
      "from django.db import models",
      "from django.contrib.auth import get_user_model",
      "",
      "User = get_user_model()",
      "",
      "# Create your models here.",
      "class ${1:ModelName}(models.Model):",
      "    '''",
      "    ${2:Type your 'model documentation' here.}",
      "    '''",
      "    ${3:field_name}: models.CharField = models.CharField(",
      "        max_length=${5:255},",
      "        unique=${6:False},",
      "        null=${7:True},",
      "        blank=${8:True}",
      "    )",
      "    ",
      "    class Meta:",
      "        db_table = \"${1:ModelName}\"",
      "        verbose_name = \"${1:ModelName}\"",
      "        verbose_name_plural = \"${1:ModelNames}s\"",
      "        ordering = [\"-${3:field_name}\"]",
      "        unique_together = ((\"${9:field_1}\", \"${10:field_2}\"),)",
      "",
      "    def __str__(self):",
      "        return self.${3:field_name}",
      ""
    ],
    "description": "Template for creating a Django model with Meta options and __str__ method"
  },
  "Django Model with without import": {
    "prefix": "snDJm",
    "body": [
      "User = get_user_model()",
      "",
      "# Create your models here.",
      "class ${1:ModelName}(models.Model):",
      "    '''",
      "    ${2:Type your 'model documentation' here.}",
      "    '''",
      "    ${3:field_name} = models.CharField(",
      "        max_length=${5:255},",
      "        unique=${6:False},",
      "        null=${7:True},",
      "        blank=${8:True}",
      "    )",
      "    ",
      "    class Meta:",
      "        db_table = \"${1:ModelName}\"",
      "        verbose_name = \"${1:ModelName}\"",
      "        verbose_name_plural = \"${1:ModelNames}s\"",
      "        ordering = [\"-${3:field_name}\"]",
      "        unique_together = ((\"${9:field_1}\", \"${10:field_2}\"),)",
      "",
      "    def __str__(self):",
      "        return self.${3:field_name}",
      ""
    ],
    "description": "Django model with Meta options and __str__ method"
  },
  "Django REST Framework Model Serializer Base with imports": {
    "prefix": "snDRFsI",
    "body": [
      "from rest_framework import serializers",
      "from .models import ${1:ModelName}",
      "",
      "class ${1:ModelName}Serializer(serializers.ModelSerializer):",
      "    # Define fields and any additional methods here.",
      "    ${2:custom_field} = serializers.SerializerMethodField()",
      "",
      "    class Meta:",
      "        model = ${1:ModelName}",
      "        fields = [\"id\", \"${2:custom_field}\"]",
      "        exclude = []",
      "        read_only_fields = [\"id\"]",
      "        write_only_fields = []",
      "        extra_kwargs = {",
      "            \"id\": {",
      "                \"read_only\": True",
      "            }",
      "        }",
      "",
      "    def get_${2:custom_field}(self, obj):",
      "        return obj.id",
      ""
    ],
    "description": "Base Django REST Framework model serializer with Meta class with imports"
  },
  "Django REST Framework Model Serializer Base without imports": {
    "prefix": "snDRFs",
    "body": [
      "class ${1:ModelName}Serializer(serializers.ModelSerializer):",
      "    # Define fields and any additional methods here.",
      "    ${2:custom_field} = serializers.SerializerMethodField()",
      "",
      "    class Meta:",
      "        model = ${1:ModelName}",
      "        fields = [\"id\", \"${2:custom_field}\"]",
      "        exclude = []",
      "        read_only_fields = [\"id\"]",
      "        write_only_fields = []",
      "        extra_kwargs = {",
      "            \"id\": {",
      "                \"read_only\": True",
      "            }",
      "        }",
      "",
      "    def get_${2:custom_field}(self, obj):",
      "        return obj.id",
      ""
    ],
    "description": "Base Django REST Framework model serializer with Meta class without imports"
  },
  "DRF Serializer, get Custom Field Method": {
    "prefix": "snDRFsgcf",
    "body": [
      "get_${1:custom_field}(self, obj):",
      "    return obj.${2:id}"
    ],
    "description": "Method to get/fetch a custom serializer field"
  },
  "DRF Serializer, Validate Field Method": {
    "prefix": "snDRFsvf",
    "body": [
      "validate_${1:field}(self, value):",
      "    if ${2:condition}:",
      "        return value",
      "    else:",
      "        raise serializers.ValidationError(\"Invalid '${1:field}'\")"
    ],
    "description": "Validation method for a specific serializer field"
  },
  "DRF Serializer, Multiple Fields Validation Method": {
    "prefix": "snDRFsvmf",
    "body": [
      "validate(self, data):",
      "    # Add validation logic here",
      "    return data"
    ],
    "description": "Method to validate multiple serializer fields"
  },
  "DRF Serializer, Create Method Override": {
    "prefix": "snDRFscrm",
    "body": [
      "create(self, validated_data):",
      "    # Handle the bulk records.",
      "    if isinstance(validated_data, list):",
      "        bulk_data = [${1:ModelName}(**data) for data in validated_data]",
      "        return ${1:ModelName}.objects.bulk_create(bulk_data)",
      "",
      "    # Handle the single record.",
      "    return ${1:ModelName}.objects.create(**validated_data)",
      ""
    ],
    "description": "Override create method for serializer"
  },
  "DRF Serializer, Update Method Override": {
    "prefix": "snDRFsupm",
    "body": [
      "update(self, instance, validated_data):",
      "    # Custom logic before updating, if needed.",
      "    for attr, value in validated_data.items():",
      "        setattr(instance, attr, value)",
      "",
      "    # Save once, after all fields are updated.",
      "    instance.save()",
      "    return instance"
    ],
    "description": "Override update method for serializer"
  },
  "DRF List APIView with imports": {
    "prefix": "snDRFListAPIViewI",
    "body": [
      "# Django Rest framework imports",
      "from rest_framework import status",
      "from rest_framework.permissions import AllowAny, IsAuthenticated",
      "from rest_framework.throttling import AnonRateThrottle, UserRateThrottle",
      "from rest_framework.views import APIView",
      "",
      "# Local imports",
      "from utils.response import Response",
      "from utils.send_email import SendEmail",
      "from .models import ${1:YourModel}",
      "from .serializers import ${1:YourModel}Serializer",
      "",
      "",
      "class ${1:YourModel}ListAPIView(APIView):",
      "    \"\"\"API view for listing and creating ${1:YourModel} instances.",
      "",
      "    Supports GET and POST methods. Other HTTP methods return 400 errors.",
      "    Requires authentication and implements rate limiting.",
      "    \"\"\"",
      "",
      "    permission_classes = [${4:IsAuthenticated}, ${5:AllowAny}]",
      "    throttle_classes = [${6:UserRateThrottle}, ${7:AnonRateThrottle}]",
      "",
      "    def get_queryset(self) -> ${1:YourModel}:",
      "        \"\"\"Retrieve queryset of ${1:YourModel} instances filtered by user.",
      "",
      "        Returns:",
      "            QuerySet: Filtered queryset of ${1:YourModel} objects belonging to the current user.",
      "            If param_name query parameter is provided, further filters by that parameter.",
      "        \"\"\"",
      "",
      "        # Get the current user from the request",
      "        user = self.request.user",
      "        queryset = ${1:YourModel}.objects.filter(user=user)",
      "        param_name = self.request.query_params.get(\"param 'name'\", None)",
      "        if param_name is not None:",
      "            queryset = queryset.filter(param_name=param_name)",
      "",
      "        return queryset",
      "",
      "    def get(self, request, *args, **kwargs) -> Response.type:",
      "        \"\"\"Retrieve ${1:YourModel} instances for the authenticated user.\"\"\"",
      "        query_instance = self.get_queryset()",
      "        serializer = ${1:YourModel}Serializer(",
      "            instance=query_instance,",
      "            data=None,",
      "            many=True,",
      "            partial=False,",
      "            context={}",
      "        )",
      "        return Response.success({",
      "            \"message\": \"Data 'retrieved' successfully\",",
      "            \"meta\": None,",
      "            \"data\": serializer.data",
      "        }, status.HTTP_200_OK)",
      "",
      "    def post(self, request, *args, **kwargs) -> Response.type:",
      "        \"\"\"Create one or more new ${1:YourModel} instances.\"\"\"",
      "        is_many = isinstance(request.data, list)",
      "        context = {",
      "            \"user\": request.user",
      "        }",
      "        serializer = ${1:YourModel}Serializer(",
      "            instance=None,",
      "            data=request.data,",
      "            many=is_many,",
      "            partial=False,",
      "            context=context",
      "        )",
      "        if serializer.is_valid():",
      "            serializer.save()",
      "            return Response.success({",
      "                \"message\": \"Data 'created' successfully\",",
      "                \"data\": serializer.data",
      "            }, status.HTTP_200_OK)",
      "",
      "        return Response.error({",
      "            \"message\": \"Invalid 'data' provided\",",
      "            \"errors\": serializer.errors",
      "        }, status.HTTP_400_BAD_REQUEST)",
      "",
      "",
      "    def put(self, request, *args, **kwargs) -> Response.type:",
      "        \"\"\"PUT method not supported.\"\"\"",
      "        return Response.method_not_allowed(\"'put'\")",
      "",
      "    def patch(self, request, *args, **kwargs) -> Response.type:",
      "        \"\"\"PATCH method not supported.\"\"\"",
      "        return Response.method_not_allowed(\"'patch'\")",
      "",
      "    def delete(self, request, *args, **kwargs) -> Response.type:",
      "        \"\"\"DELETE method not supported.\"\"\"",
      "        return Response.method_not_allowed(\"'delete'\")",
      "",
      "    def options(self, request, *args, **kwargs) -> Response.type:",
      "        \"\"\"OPTIONS method not supported.\"\"\"",
      "        return Response.options([\"GET\", \"POST\"])",
      ""
    ],
    "description": "DRF API list view with imports and CRUD handlers"
  },
  "DRF List APIView without imports": {
    "prefix": "snDRFListAPIView",
    "body": [
      "class ${1:YourModel}ListAPIView(APIView):",
      "    \"\"\"API view for listing and creating ${1:YourModel} instances.",
      "",
      "    Supports GET and POST methods. Other HTTP methods return 400 errors.",
      "    Requires authentication and implements rate limiting.",
      "    \"\"\"",
      "",
      "    permission_classes = [${4:IsAuthenticated}, ${5:AllowAny}]",
      "    throttle_classes = [${6:UserRateThrottle}, ${7:AnonRateThrottle}]",
      "",
      "    def get_queryset(self) -> ${1:YourModel}:",
      "        \"\"\"Retrieve queryset of ${1:YourModel} instances filtered by user.",
      "",
      "        Returns:",
      "            QuerySet: Filtered queryset of ${1:YourModel} objects belonging to the current user.",
      "            If param_name query parameter is provided, further filters by that parameter.",
      "        \"\"\"",
      "",
      "        # Get the current user from the request",
      "        user = self.request.user",
      "        queryset = ${1:YourModel}.objects.filter(user=user)",
      "        param_name = self.request.query_params.get(\"param 'name'\", None)",
      "        if param_name is not None:",
      "            queryset = queryset.filter(param_name=param_name)",
      "",
      "        return queryset",
      "",
      "    def get(self, request, *args, **kwargs) -> Response.type:",
      "        \"\"\"Retrieve ${1:YourModel} instances for the authenticated user.\"\"\"",
      "        query_instance = self.get_queryset()",
      "        serializer = ${1:YourModel}Serializer(",
      "            instance=query_instance,",
      "            data=None,",
      "            many=True,",
      "            partial=False,",
      "            context={}",
      "        )",
      "        return Response.success({",
      "            \"message\": \"Data 'retrieved' successfully\",",
      "            \"meta\": None,",
      "            \"data\": serializer.data",
      "        }, status.HTTP_200_OK)",
      "",
      "    def post(self, request, *args, **kwargs) -> Response.type:",
      "        \"\"\"Create one or more new ${1:YourModel} instances.\"\"\"",
      "        is_many = isinstance(request.data, list)",
      "        context = {",
      "            \"user\": request.user",
      "        }",
      "        serializer = ${1:YourModel}Serializer(",
      "            instance=None,",
      "            data=request.data,",
      "            many=is_many,",
      "            partial=False,",
      "            context=context",
      "        )",
      "        if serializer.is_valid():",
      "            serializer.save()",
      "            return Response.success({",
      "                \"message\": \"Data 'created' successfully\",",
      "                \"data\": serializer.data",
      "            }, status.HTTP_200_OK)",
      "",
      "        return Response.error({",
      "            \"message\": \"Invalid 'data' provided\",",
      "            \"errors\": serializer.errors",
      "        }, status.HTTP_400_BAD_REQUEST)",
      "",
      "",
      "    def put(self, request, *args, **kwargs) -> Response.type:",
      "        \"\"\"PUT method not supported.\"\"\"",
      "        return Response.method_not_allowed(\"'put'\")",
      "",
      "    def patch(self, request, *args, **kwargs) -> Response.type:",
      "        \"\"\"PATCH method not supported.\"\"\"",
      "        return Response.method_not_allowed(\"'patch'\")",
      "",
      "    def delete(self, request, *args, **kwargs) -> Response.type:",
      "        \"\"\"DELETE method not supported.\"\"\"",
      "        return Response.method_not_allowed(\"'delete'\")",
      "",
      "    def options(self, request, *args, **kwargs) -> Response.type:",
      "        \"\"\"OPTIONS method not supported.\"\"\"",
      "        return Response.options([\"GET\", \"POST\"])",
      ""
    ],
    "description": "DRF API list view without imports and CRUD handlers"
  },
  "DRF Detail APIView without imports": {
    "prefix": "snDRFDetailAPIView",
    "body": [
      "class ${1:YourModel}DetailAPIView(APIView):",
      "    \"\"\"API view for managing individual ${1:YourModel} instances.",
      "",
      "    Supports GET, PUT, PATCH, and DELETE operations on a single resource.",
      "    POST operations are not supported. Requires authentication and implements rate limiting.",
      "    \"\"\"",
      "",
      "    permission_classes = [${4:IsAuthenticated}, ${5:AllowAny}]",
      "    throttle_classes = [${6:UserRateThrottle}, ${7:AnonRateThrottle}]",
      "",
      "    def get_object(self, pk: int) -> ${1:YourModel} | None:",
      "        \"\"\"Retrieve a ${1:YourModel} instance by primary key.",
      "",
      "        Args:",
      "            pk (int): Primary key of the ${1:YourModel} instance",
      "",
      "        Returns:",
      "            ${1:YourModel} | None: The found model instance or None if not found",
      "        \"\"\"",
      "",
      "        try:",
      "            return ${1:YourModel}.objects.get(pk=pk)",
      "        except ${1:YourModel}.DoesNotExist:",
      "            return None",
      "",
      "    def get(self, request, pk) -> Response.type:",
      "        \"\"\"Retrieve a single ${1:YourModel} instance.\"\"\"",
      "        instance = self.get_object(pk)",
      "        if instance is None:",
      "            return Response.error({",
      "                \"message\": \"Resource 'not' found\",",
      "                \"errors\": {",
      "                    \"non_field_errors\": [",
      "                        f\"Could not find requested 'item' with ID {pk}\"",
      "                    ]",
      "                }",
      "            }, status.HTTP_404_NOT_FOUND)",
      "",
      "        serializer = ${1:YourModel}Serializer(",
      "            instance=instance,",
      "            data=None,",
      "            many=False,",
      "            partial=False,",
      "            context={}",
      "        )",
      "        return Response.success({",
      "            \"message\": \"Item 'retrieved' successfully\",",
      "            \"meta\": None,",
      "            \"data\": serializer.data",
      "        }, status.HTTP_200_OK)",
      "",
      "    def post(self, request, *args, **kwargs) -> Response.type:",
      "        \"\"\"POST method not supported for individual resources.\"\"\"",
      "        return Response.method_not_allowed(\"'post'\")",
      "",
      "    def put(self, request, pk) -> Response.type:",
      "        \"\"\"Full update of a ${1:YourModel} instance.\"\"\"",
      "        instance = self.get_object(pk)",
      "        if instance is None:",
      "            return Response.error({",
      "                \"message\": \"Resource 'not' found\",",
      "                \"errors\": {",
      "                    \"non_field_errors\": [",
      "                        f\"Could not find 'item' with ID {pk} to update\"",
      "                    ]",
      "                }",
      "            }, status.HTTP_404_NOT_FOUND)",
      "",
      "        serializer = ${1:YourModel}Serializer(",
      "            instance=instance,",
      "            data=request.data,",
      "            many=False,",
      "            partial=False,",
      "            context={}",
      "        )",
      "        if serializer.is_valid():",
      "            serializer.save()",
      "            return Response.success({",
      "                \"message\": \"Item 'updated' successfully\",",
      "                \"data\": serializer.data",
      "            }, status.HTTP_200_OK)",
      "",
      "        return Response.error({",
      "            \"message\": \"Validation 'failed'\",",
      "            \"errors\": serializer.errors",
      "        }, status.HTTP_400_BAD_REQUEST)",
      "",
      "    def patch(self, request, pk) -> Response.type:",
      "        \"\"\"Partial update of a ${1:YourModel} instance.\"\"\"",
      "        instance = self.get_object(pk)",
      "        if instance is None:",
      "            return Response.error({",
      "                \"message\": \"Resource 'not' found\",",
      "                \"errors\": {",
      "                    \"non_field_errors\": [",
      "                        f\"Could not find 'item' with ID {pk} to modify\"",
      "                    ]",
      "                }",
      "            }, status.HTTP_404_NOT_FOUND)",
      "",
      "        serializer = ${1:YourModel}Serializer(",
      "            instance=instance,",
      "            data=request.data,",
      "            many=False,",
      "            partial=True,",
      "            context={}",
      "        )",
      "        if serializer.is_valid():",
      "            serializer.save()",
      "            return Response.success({",
      "                \"message\": \"Item 'modified' successfully\",",
      "                \"data\": serializer.data",
      "            }, status.HTTP_200_OK)",
      "",
      "        return Response.error({",
      "            \"message\": \"Validation 'failed'\",",
      "            \"errors\": serializer.errors",
      "        }, status.HTTP_400_BAD_REQUEST)",
      "",
      "    def delete(self, request, pk) -> Response.type:",
      "        \"\"\"Delete a ${1:YourModel} instance.\"\"\"",
      "        instance = self.get_object(pk)",
      "        if instance is None:",
      "            return Response.error({",
      "                \"message\": \"Resource 'not' found\",",
      "                \"errors\": {",
      "                    \"non_field_errors\": [",
      "                        f\"Could not find 'item' with ID {pk} to delete\"",
      "                    ]",
      "                }",
      "            }, status.HTTP_404_NOT_FOUND)",
      "",
      "        instance.delete()",
      "        return Response.success({",
      "            \"message\": \"Item 'deleted' successfully\",",
      "            \"meta\": None,",
      "            \"data\": {",
      "                \"detail\": \"Resource 'removed'\"",
      "            }",
      "        }, status.HTTP_204_NO_CONTENT)",
      "",
      "    def options(self, request, *args, **kwargs) -> Response.type:",
      "        \"\"\"OPTIONS method not supported.\"\"\"",
      "        return Response.options([\"GET\", \"PUT\", \"PATCH\", \"DELETE\"])",
      ""
    ],
    "description": "DRF API view for CRUD operations on single model records"
  }
}
