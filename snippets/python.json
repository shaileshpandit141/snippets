{
  "AutoField": {
    "prefix": "snAutoField",
    "body": [
      "models.AutoField(primary_key=True, unique=False)$0"
    ],
    "description": "Auto incrementing integer field for primary keys"
  },
  "BigAutoField": {
    "prefix": "snBigAutoField",
    "body": [
      "models.BigAutoField(primary_key=True, unique=False)$0"
    ],
    "description": "Auto incrementing 64-bit integer field for primary keys"
  },
  "BigIntegerField": {
    "prefix": "snBigIntegerField",
    "body": [
      "models.BigIntegerField(unique=False, null=True, blank=True)$0"
    ],
    "description": "Large integer field"
  },
  "BinaryField": {
    "prefix": "snBinaryField",
    "body": [
      "models.BinaryField(max_length=None, ull=True, blank=True)$0"
    ],
    "description": "Binary field"
  },
  "BooleanField": {
    "prefix": "snBooleanField",
    "body": [
      "models.BooleanField(default=False)$0"
    ],
    "description": "Boolean field"
  },
  "CharField": {
    "prefix": "snCharField",
    "body": [
      "models.CharField(",
      "    max_length=255,",
      "    unique=False,",
      "    null=False,",
      "    blank=False,",
      ")$0"
    ],
    "description": "Character field"
  },
  "DateField": {
    "prefix": "snDateField",
    "body": [
      "models.DateField(",
      "    auto_now=False,",
      "    auto_now_add=False,",
      "    null=True,",
      "    blank=True,",
      ")$0"
    ],
    "description": "Date field"
  },
  "DateTimeField": {
    "prefix": "snDateTimeField",
    "body": [
      "models.DateTimeField(",
      "    auto_now=False,",
      "    auto_now_add=False,",
      "    null=True,",
      "    blank=True,",
      ")$0"
    ],
    "description": "Date and time field"
  },
  "DecimalField": {
    "prefix": "snDecimalField",
    "body": [
      "models.DecimalField(",
      "    max_digits=10,",
      "    decimal_places=2,",
      "    null=True,",
      "    blank=True,",
      ")$0"
    ],
    "description": "Decimal field with precision"
  },
  "DurationField": {
    "prefix": "snDurationField",
    "body": [
      "models.DurationField(null=True, blank=True)$0"
    ],
    "description": "Field for storing durations"
  },
  "EmailField": {
    "prefix": "snEmailField",
    "body": [
      "models.EmailField(",
      "    max_length=254,",
      "    unique=True,",
      "    null=False,",
      "    blank=False,",
      ")$0"
    ],
    "description": "Email field"
  },
  "FileField": {
    "prefix": "snFileField",
    "body": [
      "models.FileField(",
      "    upload_to='uploads/',",
      "    max_length=100,",
      "    null=True,",
      "    blank=True,",
      ")$0"
    ],
    "description": "File field"
  },
  "FilePathField": {
    "prefix": "snFilePathField",
    "body": [
      "models.FilePathField(",
      "    path='/path/to/files',",
      "    match=None,",
      "    recursive=False,",
      "    allow_files=True,",
      "    allow_folders=False,",
      "    max_length=100,",
      "    blank=True,",
      "    null=True,",
      ")$0"
    ],
    "description": "File path field"
  },
  "FloatField": {
    "prefix": "snFloatField",
    "body": [
      "models.FloatField(null=True, blank=True)$0"
    ],
    "description": "Float field"
  },
  "ImageField": {
    "prefix": "snImageField",
    "body": [
      "models.ImageField(",
      "    upload_to='images/',",
      "    height_field=None,",
      "    width_field=None,",
      "    max_length=100,",
      "    null=True,",
      "    blank=True,",
      ")$0"
    ],
    "description": "Image field with optional height and width fields"
  },
  "IntegerField": {
    "prefix": "snIntegerField",
    "body": [
      "models.IntegerField(unique=False, null=True, blank=True)$0"
    ],
    "description": "Integer field"
  },
  "GenericIPAddressField": {
    "prefix": "snGenericIPAddressField",
    "body": [
      "models.GenericIPAddressField(",
      "    protocol='both',",
      "    unpack_ipv4=False,",
      "    null=True,",
      "    blank=True,",
      ")$0"
    ],
    "description": "IP address field"
  },
  "JSONField": {
    "prefix": "snJSONField",
    "body": [
      "models.JSONField(",
      "    encoder=None,",
      "    decoder=None,",
      "    null=True,",
      "    blank=True,",
      ")$0"
    ],
    "description": "JSON field"
  },
  "PositiveIntegerField": {
    "prefix": "snPositiveIntegerField",
    "body": [
      "models.PositiveIntegerField(unique=False, null=True, blank=True,)$0"
    ],
    "description": "Positive integer field"
  },
  "PositiveSmallIntegerField": {
    "prefix": "snPositiveSmallIntegerField",
    "body": [
      "models.PositiveSmallIntegerField(unique=False, null=True, blank=True)$0"
    ],
    "description": "Positive small integer field"
  },
  "SlugField": {
    "prefix": "snSlugField",
    "body": [
      "models.SlugField(",
      "    max_length=50,",
      "    unique=False,",
      "    null=True,",
      "    blank=True,",
      ")$0"
    ],
    "description": "Slug field"
  },
  "SmallIntegerField": {
    "prefix": "snSmallIntegerField",
    "body": [
      "models.SmallIntegerField(unique=False, null=True, blank=True)$0"
    ],
    "description": "Small integer field"
  },
  "TextField": {
    "prefix": "snTextField",
    "body": [
      "models.TextField(null=True, blank=True)$0"
    ],
    "description": "Text field"
  },
  "TimeField": {
    "prefix": "snTimeField",
    "body": [
      "models.TimeField(",
      "    auto_now=False,",
      "    auto_now_add=False,",
      "    null=True,",
      "    blank=True,",
      ")$0"
    ],
    "description": "Time field"
  },
  "URLField": {
    "prefix": "snURLField",
    "body": [
      "models.URLField(max_length=200, null=True, blank=True)$0"
    ],
    "description": "URL field"
  },
  "UUIDField": {
    "prefix": "snUUIDField",
    "body": [
      "mmodels.UUIDField(",
      "    primary_key=False,",
      "    default=None,",
      "    editable=True,",
      "    unique=False,",
      ")$0"
    ],
    "description": "UUID field"
  },
  "ForeignKey": {
    "prefix": "snForeignKey",
    "body": [
      "models.ForeignKey(",
      "    User,",
      "    on_delete=models.CASCADE,",
      "    primary_key=False,",
      "    related_name='+',",
      "    null=False,",
      "    blank=False,",
      ")$0"
    ],
    "description": "Foreign key to another model"
  },
  "OneToOneField": {
    "prefix": "snOneToOneField",
    "body": [
      "models.OneToOneField(",
      "    User,",
      "    on_delete=models.CASCADE,",
      "    primary_key=False,",
      "    related_name='+',",
      "    null=False,",
      "    blank=False,",
      ")$0"
    ],
    "description": "One-to-one relationship with another model"
  },
  "ManyToManyField": {
    "prefix": "snManyToManyField",
    "body": [
      "models.ManyToManyField(",
      "    User,",
      "    on_delete=models.CASCADE,",
      "    primary_key=False,",
      "    related_name='+',",
      "    null=False,",
      "    blank=False,",
      ")$0"
    ],
    "description": "Many-to-many relationship with another model"
  },
  "Django Model Template with imports": {
    "prefix": "sndjmi",
    "body": [
      "from django.db import models",
      "from django.contrib.auth import get_user_model",
      "",
      "User = get_user_model()",
      "",
      "# Create your models here.",
      "class ${1:ModelName}(models.Model):",
      "    '''",
      "    ${2:Type your model documentation here.}",
      "    '''",
      "    ${3:field_name}: models.CharField = models.CharField(",
      "        max_length=${5:255},",
      "        unique=${6:False},",
      "        null=${7:True},",
      "        blank=${8:True}",
      "    )",
      "    ",
      "    class Meta:",
      "        db_table = '${1:ModelName}'",
      "        verbose_name = '${1:ModelName}'",
      "        verbose_name_plural = '${1:ModelNames}s'",
      "        ordering = ['-${3:field_name}']",
      "        unique_together = (('${9:field_1}', '${10:field_2}'),)",
      "        constraints = [",
      "            # models.UniqueConstraint(",
      "            #     fields=['${9:field_1}', '${10:field_2}'],",
      "            #     name='unique_${1:ModelName}_fields'",
      "            # )",
      "        ]",
      "",
      "    def __str__(self):",
      "        return self.${3:field_name}",
      ""
    ],
    "description": "Template for creating a Django model with Meta options and __str__ method"
  },
  "Django Model with without import": {
    "prefix": "sndjm",
    "body": [
      "User = get_user_model()",
      "",
      "# Create your models here.",
      "class ${1:ModelName}(models.Model):",
      "    '''",
      "    ${2:Type your model documentation here.}",
      "    '''",
      "    ${3:field_name}: models.CharField = models.CharField(",
      "        max_length=${5:255},",
      "        unique=${6:False},",
      "        null=${7:True},",
      "        blank=${8:True}",
      "    )",
      "    ",
      "    class Meta:",
      "        db_table = '${1:ModelName}'",
      "        verbose_name = '${1:ModelName}'",
      "        verbose_name_plural = '${1:ModelNames}s'",
      "        ordering = ['-${3:field_name}']",
      "        unique_together = (('${9:field_1}', '${10:field_2}'),)",
      "        constraints = [",
      "            # models.UniqueConstraint(",
      "            #     fields=['${9:field_1}', '${10:field_2}'],",
      "            #     name='unique_${1:ModelName}_fields'",
      "            # )",
      "        ]",
      "",
      "    def __str__(self):",
      "        return self.${3:field_name}",
      ""
    ],
    "description": "Django model with Meta options and __str__ method"
  },
  "Django REST Framework Model Serializer Base with imports": {
    "prefix": "sndrfsi",
    "body": [
      "from rest_framework import serializers",
      "from .models import ${1:ModelName}",
      "",
      "class ${1:ModelName}Serializer(serializers.ModelSerializer):",
      "    # Define fields and any additional methods here.",
      "    ${2:custom_field} = serializers.SerializerMethodField()",
      "",
      "    class Meta:",
      "        model = ${1:ModelName}",
      "        fields = ['id', '${2:custom_field}']",
      "        exclude = []",
      "        read_only_fields = ['id']",
      "        extra_kwargs = {",
      "            'id': {",
      "                'read_only': True",
      "            }",
      "        }",
      "",
      "    def get_${2:custom_field}(self, obj):",
      "        return obj.id",
      ""
    ],
    "description": "Base Django REST Framework model serializer with Meta class with imports"
  },
  "Django REST Framework Model Serializer Base without imports": {
    "prefix": "sndrfs",
    "body": [
      "class ${1:ModelName}Serializer(serializers.ModelSerializer):",
      "    # Define fields and any additional methods here.",
      "    ${2:custom_field} = serializers.SerializerMethodField()",
      "",
      "    class Meta:",
      "        model = ${1:ModelName}",
      "        fields = ['id', '${2:custom_field}']",
      "        exclude = []",
      "        read_only_fields = ['id']",
      "        extra_kwargs = {",
      "            'id': {",
      "                'read_only': True",
      "            }",
      "        }",
      "",
      "    def get_${2:custom_field}(self, obj):",
      "        return obj.id",
      ""
    ],
    "description": "Base Django REST Framework model serializer with Meta class without imports"
  },
  "DRF Serializer get Custom Field Method": {
    "prefix": "sndrfgcf",
    "body": [
      "get_${1:custom_field}(self, obj):",
      "    return obj.${2:id}"
    ],
    "description": "Method to get/fetch a custom serializer field"
  },
  "DRF Field Validation Method": {
    "prefix": "sndrfvf",
    "body": [
      "validate_${1:field}(self, value):",
      "    if ${2:condition}:",
      "        return value",
      "    else:",
      "        raise serializers.ValidationError('Invalid `${1:field}`')"
    ],
    "description": "Validation method for a specific serializer field"
  },
  "DRF Multiple Fields Validation Method": {
    "prefix": "sndrfvmf",
    "body": [
      "validate(self, data):",
      "    # Add validation logic here",
      "    return data"
    ],
    "description": "Method to validate multiple serializer fields"
  },
  "DRF Create Method Override": {
    "prefix": "sndrfcrm",
    "body": [
      "create(self, validated_data):",
      "    # Handle the bulk records.",
      "    if isinstance(validated_data, list):",
      "        bulk_data = [${1:ModelName}(**data) for data in validated_data]",
      "        return ${1:ModelName}.objects.bulk_create(bulk_data)",
      "",
      "        # Handle the single record.",
      "    return ${1:ModelName}.objects.create(**validated_data)",
      ""
    ],
    "description": "Override create method for serializer"
  },
  "DRF Update Method Override": {
    "prefix": "sndrfupm",
    "body": [
      "update(self, instance, validated_data):",
      "    # Custom logic before updating, if needed.",
      "    for attr, value in validated_data.items():",
      "        setattr(instance, attr, value)",
      "",
      "        # Save once, after all fields are updated.",
      "    instance.save()",
      "    return instance"
    ],
    "description": "Override update method for serializer"
  }
}
